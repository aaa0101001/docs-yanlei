首先，我最近做的项目是国网电子商务平台，其中采购管理就是负责招投标的，项目整体架构是springcloud+springboot架构的，首先使用的组件是gateway网关，所有请求都会经过服务网关并进行统一用户认证，所以我们在网关服务中制定了url匹配规则（过滤器），比如需要认证或者登录才能访问的
用户登录成功时，把用户信息和tocken及ip返回[防tocken盗用]，同时把登录信息存到redis中保留七天

在网关中如何获取用户信息：
	1，从cookie中获取（如：web同步请求）
	2，从header头信息中获取（如：异步请求）
	如何判断用户信息合法：
	登录时我们返回用户token，在服务网关中获取到token后，我在到redis中去查看用户id，如果用户id存在，则token合法，否则不合法，同时校验ip，防止token被盗用。

服务之间调用：feignclient
nacos服务注册中心和配置中心

1. Nacos--作为注册中心和配置中心，实现服务注册发现和服务健康监测及配置信息统一管理
2. Gateway--作为网关，作为分布式系统统一的出入口，进行服务路由，统一鉴权等
3. OpenFeign--作为远程调用的客户端，实现服务之间的远程调用
4. Sentinel--实现系统的熔断限流
5. Sleuth--实现服务的链路追踪

	nacos

		客户端启动时会将当前服务的信息包含ip、端口号、服务名、集群名等信息封装为一个Instance对象，然后创建一个定时任务，每隔一段时间向Nacos服务器发送PUT请求并携带相关信息。
		nacos服务器端在接收到心跳请求后，会去检查当前服务列表中有没有该实例，如果没有的话将当前服务实例重新注册，注册完成后立即开启一个异步任务，更新客户端实例的最后心跳时间，如果当前实例是非健康状态则将其改为健康状态。

		nacos 启动类 注解 enablediscoveryclient 服务器提供者把自己的协议地址注册nacos server 服务器消费者需要从nacos server 上查询提供者地址（服务名称）
		nacos server 需要感知到服务提供者的上下线变化 
		服务消费者需要动态感知nacos server 端服务地址的变化



主要负责至少三个功能模块【学的好的模块】，整的非常明白，业务，技术，使用的什么技术，技术原理，解决了什么问题？

此模块不是我做的，但是此模块亮点也许了解

必问：redis及rabbitmq



SpringCloud笔记
Eureka注册中心
	是什么？
		服务注册中心

	EnableEurekaClient
	EnableEurekaServer

Ribbon负载均衡
	是什么：负载均衡工具
	作用：请求转发
	使用：添加依赖
	核心：Irule
	轮询，权重，hash，随机

	RestTemplate

OpenFeign
	是什么？
		声明式web服务端

	作用：服务间远程调用
	使用：创建接口，添加注解@FeignClient，启动类上@EnableFeignClients
	@FeignClient(value = "服务名",Fallback="")
	日志打印
	备注：
	1.Feign集成了Ribbon，OpenFeign替代了RestTemplate
	2.超时控制，默认1s，超时报错
		避免：修改ribbon配置超时时间，是否重试，Hystrix配置

Hystrix
	避免模块间调用出现问题，防止雪崩，导致所有服务不可用
	是什么？
		用于处理系统延迟和容错的开源库，调用失败（超时、异常）Fallback
	能干嘛？
		服务降级
		服务熔断
		接近实时的监控


简历优化项：
前面我们已经完成了旅游套餐的管理，在新增套餐时套餐的基本信息和图片是分两次提交到后台进行操作的。也就是用户首先将图片上传到七牛云服务器，然后再提交新增窗口中录入的其他信息。如果用户只是上传了图片而没有提交录入的其他信息，此时的图片就变为了垃圾图片，因为在数据库中并没有记录它的存在。此时我们要如何处理这些垃圾图片呢？

解决方案就是通过定时任务组件定时清理这些垃圾图片。为了能够区分出来哪些图片是垃圾图片，我们在文件上传成功后将图片保存到了一个 redis 集合中，当套餐数据插入到数据库后我们又将图片名称保存到了另一个redis集合中，通过计算这两个集合的差值就可以获得所有垃圾图片的名称

1、Quartz定时器，定时清除垃圾图片
通过配置文件配置自定义job和触发器及触发时间
Jedis和RedisTemplate
apache
elementui
vue
react

（3）提供Spring配置文件application-jobs.xml，配置自定义Job、任务描述、触发器、调度工厂等

【路径】

1：创建JobDetail对象,作用是负责通过反射调用指定的Job，注入目标对象，注入目标方法

2：注册一个触发器，指定任务触发的时间

3：注册一个统一的调度工厂，通过这个调度工厂调度任务

Quartz API的关键接口是：

· Scheduler：任务调度器，所有的任务都是从这里开始。

· Trigger：触发器，定义任务执行的方式、间隔。

· JobDetail & Job ： 定义任务具体执行的逻辑。

、创建调度工厂(); 　　 //工厂模式
2、根据工厂取得调度器实例(); 　　//工厂模式
3、Builder模式构建子组件<Job,Trigger> 　　 // builder模式, 如JobBuilder、TriggerBuilder、DateBuilder
4、通过调度器组装子组件 调度器.组装<子组件1,子组件2…> 　　//工厂模式
5、调度器.start();　　 //工厂模式

定时任务创建方式：
1、SpringBoot实现定时任务
	1、使用@Scheduled注解
		1、启动类上加@EnableScheduling，
		2、方法上加@Scheduled(cron表达式)
	2、动态：基于接口（SchedulingConfigurer）
		创建动态定时任务配置类，类上注解@Configuration      //1.主要用于标记配置类，兼备Component的效果					
									@EnableScheduling   //2.开启定时任务
		从数据库中查出cron表达式
	3、基于注解设定多线程定时任务
		/**
		 * 基于注解设定多线程定时任务
		 * @author pan_junbiao
		 */
		@Component
		@EnableScheduling   // 1.开启定时任务
		@EnableAsync        // 2.开启多线程

		@Async
    	@Scheduled(fixedDelay = 1000)间隔一秒
    	Thread.sleep(1000 * 10);

    	@Async
    	@Scheduled(fixedDelay = 2000)
		由于基于注解@Scheduled默认为单线程，开启多个任务时，任务的执行时机会受上一个任务执行时间的影响。所以这里使用 @Async 注解很关键。

		角色表
用户表  			用户角色表
菜单表 			角色菜单表
权限表			角色权限表

电子商务平台
电子商务平台2.0采用一级部署方式，公司总部、各单位多级应用，2021年已完成了采购标准管理、招标采购管理、非招标采购管理、供应商关系管理、质量管理、专家管理、合同管理、协议库存管理、废旧物资处置管理、运维管理、资格预审、用户注册、投诉受理等功能模块上线应用，并完成在公司总部、各分部，各省公司及直属单位的系统实施工作。为进一步实现物资业务运作模式转变，提升物资业务管理水平，提出了本期的建设工作。
本项目是物资业务-电子商务平台2.0-设计项目（以下简称ECP2.0）的延续类项目。

采购项目准备	采购管理	遵从
发标管理	采购管理	遵从
投标管理	采购管理	遵从
开标管理	采购管理	遵从
评标管理	采购管理	遵从
定标管理	采购管理	遵从
基础管理	采购管理	遵从

工作内容：
	1、评标阶段
		1、不良行为分设置
		设定以包维度制定规则，根据规则区间计算各个包下供应商不良行为分
		2、评标专家ukey优化
	2、定标阶段
		成交公告和中标公告
		推荐中标候选人公示
	3、20 21验证源码整改 checkmax fortify
	4、页面软提示


EDAS:
	应用重启关闭既应用的扩缩容
	查看及下载阿里云内网的日志

ECS、RDS、OSS、CDN、SLB
ECS：云服务器-云主机；优势：便捷高效
RDS：云数据库；稳定、可靠、可弹性扩展
OSS：对象存储；
SLB：负载均衡；将访问流量根据转发策略分发到多台ECS实例的流量分发控制服务；扩展了应用的服务能力和可用性

Executors工具类：
                Executors.newFixedThreadPool(3)：表示创建一个固定大小的线程池！
                Executors.newSingleThreadExecutor()：表示一池一线程！
                Executors.newCachedThreadPool()：可扩容线程池！
                newScheduleThreadPool创建一个定长的线程池，而且支持定时的以及周期性的任务执行。例如延迟3秒执行
MySQL的事务
	事务的基本要素（ACID）：
		原子性（Atomicity）：事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。也就是说事务是一个不可分割的整体，就像化学中学过的原子，是物质构成的基本单位
		一致性（Consistency）：事务开始前和结束后，数据库的完整性约束没有被破坏 。比如A向B转账，不可能A扣了钱，B却没收到。
		隔离性（Isolation）：同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。
		持久性（Durability）：事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。

	事务的并发问题：
		脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据
		不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致
		幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。
	小结：
	不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表

	MySQL事务隔离级别：
		事务隔离级别							脏读		不可重复读		幻读
		读未提交（read-uncommitted）			是			是				是
		读提交（read-committed）			    否			是				是
		可重复读（repeatable-read）			否			否				是
		串行化（serializable）				否			否				否
	3、简述在MySQL数据库中MyISAM和InnoDB的区别
		InnoDB存储引擎
			主要面向OLTP(Online Transaction Processing，在线事务处理)方面的应用
			特点：
			行锁设计、支持外键、支持事务；
		MyISAM存储引擎
			主要面向OLAP(Online Analytical Processing,在线分析处理)方面的应用。
			特点：
			不支持事务，支持表所和全文索引。操作速度快。

	explain 分析一条sql
		Id:执行顺序 如果单表的话,无参考价值 如果是关联查询,会据此判断主表 从表
		Select_type:simple
		Table:表
		Type:  ALL 未创建索引 、const、 常量ref其他索引 、eq_ref 主键索引
		Possible_keys
		Key  实际是到到索引到字段
		Key_length  索引字段数据结构所使用长度 与是否有默认值null 以及对应字段到数据类型有关，有一个理论值 有一个实际使用值也即key_len的值
		Rows  检索的行数 与查询返回的行数无关
		Extra  常见的值：usingfilesort 使用磁盘排序算法进行排序，事关排序 分组 的字段是否使用索引的核心参考值
		还可能这样去提问：sql语句中哪些位置适合建索引/索引建立在哪个位置
		Select id,name,age from user where id=1 and name=”xxx” order by age
		总结:  查询字段  查询条件(最常用)   排序/分组字段
		补充:如何判断是数据库的问题?可以借助于top命令

	如何处理慢查询（上海）
		在业务系统中，除了使用主键进行的查询，其他的都会在测试库上测试其耗时，慢查询的统计主要由运维在做，会定期将业务中的慢查询反馈给我们。
		慢查询的优化首先要搞明白慢的原因是什么?
		是查询条件没有命中索引?是加载了不需要的数据列?还是数据量太大?
		所以优化也是针对这三个方向来的
		首先分析语句，看看是否加载了额外的数据，可能是查询了多余的行并且抛弃掉了，可能是加载了许多结果中并不需要的列，对语句进行分析以及重写。
		分析语句的执行计划，然后获得其使用索引的情况，之后修改语句或者修改索引，使得语句可以尽可能的命中索引。
		如果对语句的优化已经无法进行，可以考虑表中的数据量是否太大，如果是的话可以进行横向或者纵向的分表。

		处理慢查询是优化数据库性能的重要步骤。以下是一些处理慢查询的常见方法：

			识别慢查询：通过数据库性能监控工具或查询日志，找出执行时间过长的查询语句。

			优化查询：检查慢查询语句的执行计划，确保索引被正确使用，避免全表扫描等低效操作。可以考虑使用索引、优化查询语句或重新设计数据库结构。

			调整数据库配置：根据实际需求，调整数据库配置参数，如内存大小、缓冲区大小等，以提升查询性能。

			数据库分片：对于数据量过大的数据库，考虑使用数据库分片技术，将数据拆分成多个部分，分布在多个服务器上，以减轻单一数据库的压力。

			缓存数据：对于频繁查询但不经常变动的数据，可以考虑使用缓存技术，将查询结果缓存在内存中，以减少数据库的负载。

			定期维护：定期执行数据库维护任务，如重新建立索引、优化数据库表结构、清理无用数据等，以保持数据库的性能。

			分析查询日志：通过分析查询日志，了解查询模式、瓶颈问题以及潜在的性能优化点，以指导后续的性能优化工作。

			以上方法可以根据具体情况选择性地使用，同时也可以结合数据库性能评估工具和专业数据库管理员的建议进行处理


项目亮点：
	1、接口重复调用
		接口重复调用，接口被调用两次，
		日志显示服务提供方被执行两次，但间隔时间非常短，服务调用方只显示调用一次，没有切到ribbon的逻辑
		最终：上游的重试导致的，重试策略通过参数化配置的
		重试：超时多久发起重试
		优点：保证服务的高可用
		查询接口影响不大
		写入接口就会产生事务重复提交
		接口幂等性问题
		rpc框架重试策略
		dubbo自动重试两次
		保证接口幂等：
			第一种：
				分布式锁
				
				数据库Uk兜底{唯一键}
			第二种：
				关闭重试，可靠性降低
			第三种：
				横向逻辑+抽象aop+：注解+切面
				加注解，代表这个接口要保证幂等性【比如写入接口】
				每次调用都有一个唯一标识
				traceId
				拦截器或切面做

			抽象出横向的需求

			能不能做非常合理的抽象，通过一个问题解决一类问题

			ribbon同一台实例最大重试次数：3次

			ribbon:
			  ReadTimeout:  3000
			  ConnectTimeout: 3000
			  MaxAutoRetries: 1 #同一台实例最大重试次数,不包括首次调用
			  MaxAutoRetriesNextServer: 1 #重试负载均衡其他的实例最大重试次数,不包括首次调用
			  OkToRetryOnAllOperations: false #是否所有操作都重试

	2、线上redis内存告警
		告警内容：redis内存使用达到85%

		线上内存redis内存大小8G【单分片】，一般使用4-5个G

		其中有一个接口调用量特别高，接口查询走redis，接口qps并没有增加

		接口是不是在发布
		第一步：回滚
		原因：没有时间解决问题，最高优先级恢复线上业务不受影响，后面再弥补
		第二步：联系dba回滚

		接口告警到报错：10分钟
		接口报错--扩容：10分钟

		原因：
			背景：
				数据一致场景
				要求并不高，性能有影响，维护成本高，人工介入
				通过对账系统，发短信或邮件告知开发者介入
					注意点：
						执行频率：例如数据范围跑一次需要一个小时，定时任务10分钟跑一次，无意义
						对账时间范围：不应该每次都跑全量的，只做增量数据的对账
						业务优先：不应该对业务有太多影响，用从库或低峰期去跑，高峰期跑可能会产生误报，基本上对账就形同虚设了没有参考价值

		对账数据范围
			全量查询，轮询调接口，一开始热数据，后面冷数据，请求全部打到数据库中，数据库把数据全部缓存到redis中，redis内存就爆了
			冷数据：redis中没有存的数据

		为什么redis满了会直接请求报错呢？
			因为没有配淘汰策略



	第一点：梳理下是不是所有redis实例配置了淘汰策略，满了会挂，根据业务选择淘汰策略
	第二点：不能只关注内存使用率，还有监控增长速率，平滑到增加
	第三点：跨团队，一起

	不合理：
		高峰期跑
		范围不对

	优点：起了有限的线程跑任务，三个分片

	能跑离线尽量跑离线，甚至可以把接口单独部署在优先级的节点上，连一个从库，至少能够保证不会因为一个对账业务把核心链路搞垮


	冷数据跑到数据库中，把redis撑爆，刚好没有配置淘汰策略


1、项目架构
哪四种redis数据类型
2、业务功能模块
3、部署



必问：redis+rabbitmq
rabbitmq使用场景：
1、商品上下架
2、订单关闭
3、支付-订单-库存

项目亮点：线程池+异步编排、定时任务

静态化页面指的是将动态生成的页面转换成静态的 HTML 页面，以提高页面访问速度和性能，降低服务器的负载。相比于动态页面，静态页面可以更快地加载、更易于缓存，并且更具可靠性和稳定性。

静态化页面的实现可以通过以下方式：

静态文件生成：在服务器端使用模板引擎（如 Thymeleaf、Freemarker 等）生成 HTML 页面，然后将页面保存为静态文件，以供客户端访问。这种方式需要考虑缓存更新机制，以保证静态文件随时与动态数据同步。

页面缓存：在服务器端使用缓存技术（如 Redis、Memcached 等）缓存动态页面，避免相同请求多次生成页面，提高响应速度。这种方式需要考虑缓存失效机制，以保证页面的即时性和正确性。

CDN 加速：使用 CDN（内容分发网络）技术，将静态页面缓存在 CDN 的节点上，加速页面的访问速度和响应时间。这种方式需要考虑 CDN 缓存更新和刷新机制，以保证页面的新鲜度和正确性。

总之，静态化页面可以有效提升网站的性能和用户体验，减少服务器压力，但需要注意缓存更新和失效机制，以确保页面的可靠性和正确性。


mysql中大量数据，如何保证
哨兵模式
一主多从，监听服务，从每秒ping主服务，


什么时候会产生栈溢出和堆溢出？

栈：方法名，局部变量，

1、创建变量过多会产生栈异常
2、无限循环创建

引发 StackOverFlowError （栈溢出）的常见原因有以下几种：

无线递归循环，死循环，递归没有结束条件
初始化栈设置的太小了，导致空间不足。
执行了大量方法，导致线程栈空间耗尽
方法内声明了海量的局部变量
native代码有栈上分配的逻辑，并且要求内存还不小。


引发OutOfMemoryError（堆溢出）的常见原因有以下几种：

一次性从数据库中查询过多的数据，这些数据都需要使用java对象封装，都在堆内存中创建。
文件上传时，一次性获取了过多过大的文件。
加载阶段，在项目中对象使用的特别多，比如spring加载的对象特别多，IOC存放的对象也是在堆内存存储，超过了堆内存上限。
内存中加载的数据量过于庞大，如一次从数据库取出过多数据。
集合类中有对对象的引用，使用完后未清空，使得JVM不能回收。
代码中存在死循环或循环产生过多重复的对象实体。
启动参数内存值设定的过小

cookie和session是什么


